{"ast":null,"code":"var _jsxFileName = \"/Users/sanilmanaktala/Desktop/New App/leave-tracking-frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// Auto-detect API URL: use localhost for development, production backend for production\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' ? 'http://localhost:8000' : 'https://leave-tracking-backend.onrender.com');\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  const fetchUserProfile = useCallback(async () => {\n    if (!token) {\n      setLoading(false);\n      return;\n    }\n    try {\n      const currentToken = token; // capture token at call time to avoid race on logout\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${currentToken}`\n        }\n      });\n      if (response.ok) {\n        // If user logged out while request was in flight, ignore this response\n        if (localStorage.getItem('token') !== currentToken) {\n          setLoading(false);\n          return;\n        }\n        const userData = await response.json();\n        setUser(userData);\n      } else if (response.status === 401) {\n        // Only logout on 401 Unauthorized (invalid token)\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n      }\n      // For other errors (network, 500, etc), keep user logged in\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      // Don't logout on network errors - keep user logged in\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (token) {\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]); // Only depend on token, not the function\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        const errorData = await response.json();\n        console.log('Login error response:', {\n          status: response.status,\n          errorData\n        });\n        let errorMessage = errorData.error || errorData.message || 'Login failed';\n\n        // Provide more helpful error messages\n        if (response.status === 401) {\n          errorMessage = 'Invalid email or password. Please check your credentials and try again.';\n        } else if (response.status === 500) {\n          errorMessage = 'Server error. Please try again later.';\n        }\n        console.log('Returning error:', errorMessage);\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        const errorData = await response.json();\n        return {\n          success: false,\n          error: errorData.error || errorData.message || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  };\n  const logout = () => {\n    // Increment a simple logout timestamp to break any in-flight profile requests\n    localStorage.setItem('logout_at', String(Date.now()));\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    setLoading(false);\n\n    // Force a small delay to ensure state updates are processed\n    setTimeout(() => {\n      // Additional cleanup if needed\n      console.log('User logged out successfully');\n    }, 100);\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    fetchUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"w/ysnxwH+7hqjyZNAfK0I1no08c=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","window","location","hostname","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","fetchUserProfile","currentToken","response","fetch","headers","ok","userData","json","status","removeItem","error","console","login","email","password","method","body","JSON","stringify","data","setItem","success","errorData","log","errorMessage","message","register","name","logout","String","Date","now","setTimeout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sanilmanaktala/Desktop/New App/leave-tracking-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// Auto-detect API URL: use localhost for development, production backend for production\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \n  (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'\n    ? 'http://localhost:8000'\n    : 'https://leave-tracking-backend.onrender.com');\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n\n  const fetchUserProfile = useCallback(async () => {\n    if (!token) {\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const currentToken = token; // capture token at call time to avoid race on logout\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        headers: {\n          'Authorization': `Bearer ${currentToken}`\n        }\n      });\n\n      if (response.ok) {\n        // If user logged out while request was in flight, ignore this response\n        if (localStorage.getItem('token') !== currentToken) {\n          setLoading(false);\n          return;\n        }\n        const userData = await response.json();\n        setUser(userData);\n      } else if (response.status === 401) {\n        // Only logout on 401 Unauthorized (invalid token)\n        localStorage.removeItem('token');\n        setToken(null);\n        setUser(null);\n      }\n      // For other errors (network, 500, etc), keep user logged in\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      // Don't logout on network errors - keep user logged in\n    } finally {\n      setLoading(false);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (token) {\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]); // Only depend on token, not the function\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        const errorData = await response.json();\n        console.log('Login error response:', { status: response.status, errorData });\n        \n        let errorMessage = errorData.error || errorData.message || 'Login failed';\n        \n        // Provide more helpful error messages\n        if (response.status === 401) {\n          errorMessage = 'Invalid email or password. Please check your credentials and try again.';\n        } else if (response.status === 500) {\n          errorMessage = 'Server error. Please try again later.';\n        }\n        \n        console.log('Returning error:', errorMessage);\n        return { success: false, error: errorMessage };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        const errorData = await response.json();\n        return { success: false, error: errorData.error || errorData.message || 'Registration failed' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Network error' };\n    }\n  };\n\n  const logout = () => {\n    // Increment a simple logout timestamp to break any in-flight profile requests\n    localStorage.setItem('logout_at', String(Date.now()));\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    setLoading(false);\n    \n    // Force a small delay to ensure state updates are processed\n    setTimeout(() => {\n      // Additional cleanup if needed\n      console.log('User logged out successfully');\n    }, 100);\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    fetchUserProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}